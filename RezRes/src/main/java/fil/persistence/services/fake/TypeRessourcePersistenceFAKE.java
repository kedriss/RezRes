/*
 * Created on 26 oct. 2015 ( Time 19:14:44 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package fil.persistence.services.fake;

import java.util.List;
import java.util.Map;

import fil.bean.jpa.TypeRessourceEntity;
import fil.persistence.commons.fake.GenericFakeService;
import fil.persistence.services.TypeRessourcePersistence;

/**
 * Fake persistence service implementation ( entity "TypeRessource" )
 *
 * @author Telosys Tools Generator
 */
public class TypeRessourcePersistenceFAKE extends GenericFakeService<TypeRessourceEntity> implements TypeRessourcePersistence {

	public TypeRessourcePersistenceFAKE () {
		super(TypeRessourceEntity.class);
	}
	
	protected TypeRessourceEntity buildEntity(int index) {
		TypeRessourceEntity entity = new TypeRessourceEntity();
		// Init fields with mock values
		entity.setCle( nextInteger() ) ;
		entity.setLibelle( nextString() ) ;
		return entity ;
	}
	
	
	public boolean delete(TypeRessourceEntity entity) {
		log("delete ( TypeRessourceEntity : " + entity + ")" ) ;
		return true;
	}

	public boolean delete( Integer cle ) {
		log("delete ( PK )") ;
		return true;
	}

	public void insert(TypeRessourceEntity entity) {
		log("insert ( TypeRessourceEntity : " + entity + ")" ) ;
	}

	public TypeRessourceEntity load( Integer cle ) {
		log("load ( PK )") ;
		return buildEntity(1) ; 
	}

	public List<TypeRessourceEntity> loadAll() {
		log("loadAll()") ;
		return buildList(40) ;
	}

	public List<TypeRessourceEntity> loadByNamedQuery(String queryName) {
		log("loadByNamedQuery ( '" + queryName + "' )") ;
		return buildList(20) ;
	}

	public List<TypeRessourceEntity> loadByNamedQuery(String queryName, Map<String, Object> queryParameters) {
		log("loadByNamedQuery ( '" + queryName + "', parameters )") ;
		return buildList(10) ;
	}

	public TypeRessourceEntity save(TypeRessourceEntity entity) {
		log("insert ( TypeRessourceEntity : " + entity + ")" ) ;
		return entity;
	}

	public List<TypeRessourceEntity> search(Map<String, Object> criteria) {
		log("search (criteria)" ) ;
		return buildList(15) ;
	}

	@Override
	public long countAll() {
		return 0 ;
	}

}
