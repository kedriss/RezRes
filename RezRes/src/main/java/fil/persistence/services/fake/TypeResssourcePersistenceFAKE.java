/*
 * Created on 20 oct. 2015 ( Time 11:40:31 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package fil.persistence.services.fake;

import java.util.List;
import java.util.Map;

import fil.bean.jpa.TypeResssourceEntity;
import fil.persistence.commons.fake.GenericFakeService;
import fil.persistence.services.TypeResssourcePersistence;

/**
 * Fake persistence service implementation ( entity "TypeResssource" )
 *
 * @author Telosys Tools Generator
 */
public class TypeResssourcePersistenceFAKE extends GenericFakeService<TypeResssourceEntity> implements TypeResssourcePersistence {

	public TypeResssourcePersistenceFAKE () {
		super(TypeResssourceEntity.class);
	}
	
	protected TypeResssourceEntity buildEntity(int index) {
		TypeResssourceEntity entity = new TypeResssourceEntity();
		// Init fields with mock values
		entity.setCle( nextInteger() ) ;
		entity.setLibelle( nextString() ) ;
		return entity ;
	}
	
	
	public boolean delete(TypeResssourceEntity entity) {
		log("delete ( TypeResssourceEntity : " + entity + ")" ) ;
		return true;
	}

	public boolean delete( Integer cle ) {
		log("delete ( PK )") ;
		return true;
	}

	public void insert(TypeResssourceEntity entity) {
		log("insert ( TypeResssourceEntity : " + entity + ")" ) ;
	}

	public TypeResssourceEntity load( Integer cle ) {
		log("load ( PK )") ;
		return buildEntity(1) ; 
	}

	public List<TypeResssourceEntity> loadAll() {
		log("loadAll()") ;
		return buildList(40) ;
	}

	public List<TypeResssourceEntity> loadByNamedQuery(String queryName) {
		log("loadByNamedQuery ( '" + queryName + "' )") ;
		return buildList(20) ;
	}

	public List<TypeResssourceEntity> loadByNamedQuery(String queryName, Map<String, Object> queryParameters) {
		log("loadByNamedQuery ( '" + queryName + "', parameters )") ;
		return buildList(10) ;
	}

	public TypeResssourceEntity save(TypeResssourceEntity entity) {
		log("insert ( TypeResssourceEntity : " + entity + ")" ) ;
		return entity;
	}

	public List<TypeResssourceEntity> search(Map<String, Object> criteria) {
		log("search (criteria)" ) ;
		return buildList(15) ;
	}

	@Override
	public long countAll() {
		return 0 ;
	}

}
